# -*- coding: utf-8 -*-
"""Proyek Airbnb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1omVjAZyL8ss7c404Ei0-Dz_syygz28IY

# Proyek Analisis Data: Nama dataset
- Nama:
- Email:
- Id Dicoding:

## Menentukan Pertanyaan Bisnis

- Bagaimana performa penjualan setiap tahunnya ?
- Wilayah mana saja yang paling diminati oleh pelanggan dalam memesan ?
- Berapa lama rata-rata konsumen menyewa tempatnya ?

## Menyiapkan semua library yang dibuthkan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#menghubungkan dengan google drive
from google.colab import drive
drive.mount('/content/drive')

"""## Data Wrangling

### Gathering Data

**Tabel Calender**
"""

calender = pd.read_csv('/content/drive/MyDrive/Data Scientist/Dataset Airbnb/Dataset/calendar.csv')
calender.head()

"""**Tabel Listing**"""

listings = pd.read_csv('/content/drive/MyDrive/Data Scientist/Dataset Airbnb/Dataset/listings.csv')
listings.head()

"""**Tabel Neighbourhood**"""

neighbourhood = pd.read_csv('/content/drive/MyDrive/Data Scientist/Dataset Airbnb/Dataset/neighbourhoods.csv')
neighbourhood.head()

"""**Tabel Review**"""

review = pd.read_csv('/content/drive/MyDrive/Data Scientist/Dataset Airbnb/Dataset/reviews.csv')
review.head()

"""**Menghitung Jumlah Data**"""

print('Jumlah data pada Calender: ', len(calender.listing_id.unique()))
print('Jumlah data pada Listings: ', len(listings.id.unique()))
print('Jumlah data pada Review: ', len(review.listing_id.unique()))

"""### Assessing Data

**Calendeer.Info**
"""

calender.info()

"""**Melihat Mising Value**"""

calender.isna().sum()

"""**Memeriksa Duplikasi**"""

print('Jumlah Duplikasi :', calender.duplicated().sum())

"""**Memeriksa menggunakan Describe**"""

calender.describe()

"""**Listings.Info**"""

listings.info()

"""**Melihat Missing Value**"""

listings.isna().sum()

"""**Memeriksa Duplikasi**"""

print('Jumlah Duplikasi :', listings.duplicated().sum())

"""**Memeriksa Menggunakan Describe**"""

listings.describe()

"""**Review.Info**"""

review.info()

"""**Memeriksa Missing Value Review**"""

review.isnull().sum()

"""**Memeriksa Duplikasi**"""

print('Jumlah Duplikasi :', review.duplicated().sum())

"""**Memeriksa Menggunakan Describe**"""

review.describe()

"""### Cleaning Data

**Melihat Missing Value Listings**
"""

listings.isnull().sum()

Missing_Listings=listings.isnull().sum()

print("Daftar Missing Value:")
print(Missing_Listings[Missing_Listings > 0])

"""Melihat Missing value pada description"""

listings[listings.description.isna()]

"""Mengisi Missing Value Description"""

listings['description'].fillna('Information not available', inplace=True)

"""Melihat Missing Value pada picture_url"""

listings[listings.picture_url.isna()]

"""Mengisi Missing Value picture_url"""

listings['picture_url'].fillna('Link not available', inplace=True)

"""Melihat Missing Value pada neighborhood_overview"""

listings[listings.neighborhood_overview.isna()]

"""Mengisi Missing value neighborhood_overview"""

listings['neighborhood_overview'].fillna('Overview not available', inplace=True)

"""Melihat Missing Value pada host_location"""

listings[listings.host_location.isna()]

"""Menghitung Jumlah Missing Value untuk katogorikal Host Location"""

listings.host_location.value_counts()

"""Mengisi Missing value host_location dengan Amsterdam, Netherlands karena memiliki jumlah yang dominan"""

listings['host_location'].fillna('Amsterdam, Netherlands', inplace=True)

"""Melihat Missing Value pada host_about"""

listings[listings.host_about.isna()]

"""Mengisi Missing Value host_about"""

listings['host_about'].fillna('Host About not available', inplace=True)

"""Melihat Missing Value pada host_response_time"""

listings[listings.host_response_time.isna()]

"""Menghitung Jumlah Misisng Value untuk kategorikal host_response_time"""

listings.host_response_time.value_counts()

"""Mengisi Missing value host_response_time dengan within an hour, Netherlands karena memiliki jumlah yang dominan"""

listings['host_response_time'].fillna('within an hour', inplace=True)

"""Melihat Missing value pada host_response_rate"""

listings[listings.host_response_rate.isna()]

"""Menghitung Jumlah Misisng Value untuk kategorikal host_response_rate"""

listings.host_response_rate.value_counts()

"""Mengisi Missing Value host_response_rate dengan 100%, karena memiliki value yang dominan"""

listings['host_response_rate'].fillna(value="100%",inplace=True)

"""Melihat Missing Value pada host_acceptance_rate"""

listings[listings.host_acceptance_rate.isna()]

"""Mengitung Jumlah Missing Value untuk kategorikal host_acceptance_rate"""

listings.host_acceptance_rate.value_counts()

"""Mengisi Missing value host_acceptance_rate dengan 100%, karena memiliki nilai yang dominan"""

listings['host_acceptance_rate'].fillna('100%', inplace=True)

"""Melihat Missing value pada host_is_superhost"""

listings[listings.host_is_superhost.isna()]

"""Menghitung Jumlah Missing Value untuk kategorikal host_is_superhost"""

listings.host_is_superhost.value_counts()

"""Mengisi Missing value host_is_superhost dengan ***f***, Netherlands karena memiliki jumlah yang dominan"""

listings['host_is_superhost'].fillna('f', inplace=True)

"""Melihat Missing Value pada host_neighbourhood"""

listings[listings.host_neighbourhood.isna()]

"""Menghitung jumlah Missing Value untuk kategorikal host_neighbourhood"""

listings.host_neighbourhood.value_counts()

"""Mengisi Missing Value host_neighbourhood dengan Oud_West, karena memiliki jumlah yang dominan"""

listings['host_neighbourhood'].fillna('Oud-West', inplace=True)

"""Melihat Missing Value pada neighbourhood"""

listings[listings.neighbourhood.isna()]

"""Menghitung Jumlah Missing Value untuk kategorikal neighbourhood"""

listings.neighbourhood.value_counts()

"""Mengisi Missing Value neighbourhood dengan Amsterdam, Noord-Holland, Netherland,karena memiliki jumlah dominan"""

listings['neighbourhood'].fillna('Amsterdam, Noord-Holland, Netherland', inplace=True)

"""Melihat Missing Value pada neighbourhood_group_cleansed"""

listings[listings.neighbourhood_group_cleansed.isna()]

"""Menghapus kolom neighbourhood_group_cleansed, kolom ini dihapus karena valuenya kosong dari awal sampai akhir"""

listings.drop('neighbourhood_group_cleansed', axis=1, inplace=True)

"""Melihat Missing Value pada bathrooms"""

listings[listings.bathrooms.isna()]

"""Menghapus kolom bathrooms, kolom ini dihapus karena valuenya kosong dari awal sampai akhir"""

listings.drop('bathrooms', axis=1, inplace=True)

"""Melihat Missing Value pada bathrooms_text"""

listings[listings.bathrooms_text.isna()]

"""Menghitung jumlah Missing Valur untuk kategorikal bathrooms_text"""

listings.bathrooms_text.value_counts()

"""Mengisi Missing Value bathrooms_text dengan Oud_West, karena memiliki jumlah yang dominan"""

listings['bathrooms_text'].fillna('bathrooms_text', inplace=True)

"""Melihat Missing Value pada bedrooms"""

listings[listings.bedrooms.isna()]

"""Menghitung jumlah Missing Value untuk kategorikal bedrooms"""

listings.bedrooms.value_counts()

"""Mengisi Missing Value bedrooms dengan Oud_West, karena memiliki jumlah yang dominan"""

listings['bedrooms'].fillna('1.0', inplace=True)

"""Melihat Missing Value pada  beds"""

listings[listings.beds.isna()]

"""Menghitung jumlah Missing Value untuk kategorikal beds"""

listings.beds.value_counts()

"""Mengisi Missing Value beds dengan **1.0**, karena memiliki jumlah yang dominan"""

listings['beds'].fillna('1.0', inplace=True)

"""Melihat Missing Value pada calendar_updated"""

listings[listings.calendar_updated.isna()]

"""Menghapus kolom calendar_updated, kolom ini dihapus karena valuenya kosong dari awal sampai akhir"""

listings.drop('calendar_updated', axis=1, inplace=True)

"""Melihat Missing Value pada first_review"""

listings[listings.first_review.isna()]

"""Melihat Tipe Tanggal"""

date_column_type = listings['first_review'].dtypes
print("Tipe data kolom tanggal:", date_column_type)

"""Merubah type tanggal"""

listings['first_review'] = pd.to_datetime(listings['first_review'])

"""Jika dataset berisi tanggal dalam format numerik (misalnya, jumlah hari sejak awal tahun), Dapat mengisi tanggal yang hilang dengan rata-rata tanggal."""

# Mengisi tanggal yang hilang dengan rata-rata tanggal dalam dataset
mean_date = listings['first_review'].mean()
listings['first_review'].fillna(mean_date, inplace=True)

"""Melihat Missing Value pada last_review"""

listings[listings.last_review.isna()]

"""Merubah type tanggal"""

listings['last_review'] = pd.to_datetime(listings['last_review'])

"""Mengisi tanggal yang hilang dengan rata-rata tanggal dalam dataset"""

mean_date = listings['last_review'].mean()
listings['last_review'].fillna(mean_date, inplace=True)

"""Melihat Missing Value pada review_scores_rating"""

listings[listings.review_scores_rating.isna()]

listings.review_scores_rating.value_counts()

"""Mengisi Missing Value review_scores_rating dengan **5.00**, karena memiliki jumlah yang dominan"""

listings['review_scores_rating'].fillna('5.00', inplace=True)

"""Melihat Missing Value pada review_scores_accuracy"""

listings[listings.review_scores_accuracy.isna()]

"""Menghitung jumlah missing value untul kategorikal review_scores_accuracy"""

listings.review_scores_accuracy.value_counts()

"""Mengisi Missing value review_scores_accuracy dengan **5.00**, karena memiliki jumlah yang dominan"""

listings['review_scores_accuracy'].fillna('5.00', inplace=True)

"""Melihat Missing value review_scores_cleanliness"""

listings[listings.review_scores_cleanliness.isna()]

"""Menghitung jumlah missing value untuk review_scores_cleanliness"""

listings.review_scores_cleanliness.value_counts()

"""Mengisi missing value review_scores_cleanliness dengan **5.00**, karena memiliki jumlah yang lebih dominan"""

listings['review_scores_cleanliness'].fillna('5.00', inplace=True)

"""Melihat Missing value review_scores_checkin"""

listings[listings.review_scores_checkin.isna()]

"""Menghitung Missing Value review_scores_checkin"""

listings[listings.review_scores_checkin.isna()]

"""Menghitung jumlah missing value pada review_scores_checkin"""

listings.review_scores_checkin.value_counts()

"""Mengisi missing value review_scores_checkin dengan **5.00**, karena memiliki jumlah yang lebih dominan"""

listings['review_scores_checkin'].fillna('5.00', inplace=True)

"""Melihat missing value pada review_scores_communication"""

listings[listings.review_scores_communication.isna()]

"""Menghitung jumlah missing value untuk review_scores_communication"""

listings.review_scores_communication.value_counts()

"""Mengisi missing value review_scores_communication dengan **5.00**, karena memiliki jumlah yang dominan"""

listings['review_scores_communication'].fillna('5.00', inplace=True)

"""Menghitung missing value pada review_scores_location"""

listings.review_scores_location.value_counts()

"""mengisi missing value review_scores_location dengan **5.00**, karena memiliki jumlah yang dominan"""

listings['review_scores_location'].fillna('5.00', inplace=True)

"""menghitung missing value review_scores_value"""

listings.review_scores_value.value_counts()

"""mengisi missing value review_scores_value dengan **5.00**, karena memiliki nilai yang dominan"""

listings['review_scores_value'].fillna('5.00', inplace=True)

"""Menghitung jumlah missing value"""

listings.license.value_counts()

"""mengisi missing value dengan **Exempt**, karena memiliki jumlah yang dominan"""

listings['license'].fillna('Exempt', inplace=True)

"""menghitung missing value reviews_per_month"""

listings.reviews_per_month.value_counts()

"""Mengisi dengan Nilai Median:
Jika distribusi data memiliki outlier, mengisi dengan median dapat lebih stabil daripada rata-rata. Ini dapat dilakukan dengan cara yang sama seperti mengisi dengan nilai rata-rata.
"""

median_reviews = listings['reviews_per_month'].median()
listings['reviews_per_month'].fillna(median_reviews, inplace=True)

listings.reviews_per_month.head()

Missing_Listings=listings.isnull().sum()

print("Daftar Missing Value:")
print(Missing_Listings[Missing_Listings > 0])

"""**Membersihkan Missing Value Pada Review**"""

review.isnull().sum()

"""## Exploratory Data Analysis (EDA)

### Explore Data Calender

Menggunakan Describe dengan include = all
"""

calender.describe(include="all")

"""Menggunakan **hist**() untuk membuat plot histogram dari kolom numerik pada sebuah DataFrame"""

calender.hist()

"""memeriksa korelasi antar data numerik pada sebuah DataFrame dengan **corr()**"""

calender.corr()

"""### Explore Data Listings

Menggunakan Describe dengan include = all
"""

listings.describe(include='all')

"""Pivot table untuk memperoleh informasi terkait jumlah tempat yang ditawarkan berdasarkan kota"""

listings.groupby(by='host_location').id.nunique().sort_values(ascending=False).reset_index().head(10)

"""### Explore Data Reviews

Menggunakan Describe dengan include = all
"""

review.describe(include='all')

"""Merge Tabel calender, listings dan review"""

airbnb = pd.merge(
    left=listings,
    right=review,
    how='left',
    left_on='id',
    right_on='id'
)
airbnb.head()

airbnb_df = pd.merge(
    left=airbnb,
    right=calender,
    how='left',
    left_on='listing_id',
    right_on='listing_id'
)
airbnb_df.head(2)

"""Pivot tabel untuk informasi lama penyewaaan berdasarkan tempatnya"""

airbnb_df.groupby(by=["neighbourhood","host_response_time"]).agg({
    "listing_id": "nunique",
    "host_listings_count": "sum",
}).sort_values(by="host_listings_count", ascending=False)

"""## Visualization & Explanatory Analysis

### Pertanyaan 1: Bagaimana performa penyewaan setiap tahunnya ?

Menggunakan resample untuk memperoleh informasi terkait penyewaan
"""

year_airbnb_df = airbnb_df.resample(rule='M', on='first_review').agg({
    'id':'nunique',
    "host_listings_count": "sum"
})

# year_airbnb_df['first_review']=year_airbnb_df['first_review'].dt.strftime('%Y-%m')
year_airbnb_df.index=year_airbnb_df.index.strftime('%Y')
year_airbnb_df=year_airbnb_df.groupby('first_review')['host_listings_count'].sum().reset_index()
# year_airbnb_df=year_airbnb_df.reset_index()
year_airbnb_df.rename(columns={
    "id": "order_count",
    "first_review": "year"
}, inplace=True)
year_airbnb_df.head()

"""Menggunakan line chart untuk memvisualisasikan"""

plt.figure(figsize=(10, 5))
plt.plot(year_airbnb_df["year"], year_airbnb_df["host_listings_count"], marker='o', linewidth=2, color="blue")
plt.title("Number of Orders per Year", loc="center", fontsize=20)
plt.xticks(fontsize=10, rotation = 45)
plt.yticks(fontsize=10)
plt.show()

"""### Pertanyaan 2: Wilayah mana saja yang paling diminati oleh pelanggan dalam memesan ?

Membuat sebuah DataFrame baru guna menampung informasi terkait jumlah wilayah yang diminati
"""

sum_order_items_df = airbnb_df.groupby(['host_location', 'source']).size().sort_values(ascending=False).reset_index(name='count')
sum_order_items_df.head(15)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(26, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="host_location", y="count", data=sum_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="host_location", y="count", data=sum_order_items_df.sort_values(by="host_location", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Best and Worst Performing Product by Number of Sales", fontsize=20)
plt.show()

"""## Conclusion

**Bagaimana performa penyewaan setiap tahunnya ?**
- Performa penyewaam setiap tahun sangat fluktuatif takan tetapi grafik tertinggi pada tahun 2019


**Wilayah mana saja yang paling diminati oleh pelanggan dalam memesan ?**
- Tempat yang diminati berada pada kota Amsterdam, Belanda

**Menyimpan Berkas**
"""

airbnb_df.to_csv('airbnb_df.csv', index=False)